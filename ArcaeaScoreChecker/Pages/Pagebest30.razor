@page "/pagebest30"
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationMgr

<div id="listofall">
    <div class="idcard mb-3">
        <img src="images/char/unknown_icon.png" class="headimg" />
        <div class="idcard_content">
            <p align="center" style="font-size:1.6em;margin:0;font-weight:bold">B30[@(Tools.FloatParse.GetString(Best30CurrentValue,5))]</p>
        </div>
        <div class="ranking">
            <img src="images/ranking/rating_@(PttRank).png" />
            <div class="ptttext">@(Tools.FloatParse.GetString(Best30Value,2))</div>
        </div>
    </div>
@foreach (var a in Best40)
{
    @if (GlobalData.songs.Count((x) => { return x.ID == a.SongID; }) < 1)
    {
        <div>[@a.SongID] 缺失数据...</div>
        continue;
    }
    <div class="songCard">
        <div>
            <div class="scores_lbl_b30index" style="@(
                Array.IndexOf(Best40, a) == 0 ? "background-color:#ffd321" :
                Array.IndexOf(Best40, a) == 1 ? "background-color:#d8d8d8" :
                Array.IndexOf(Best40, a) == 2 ? "background-color:#b87333" : 
                Array.IndexOf(Best40, a) > 29 ? "background-color:#444;color:white" : ""
                )">
                #@(
               Array.IndexOf(Best40, a) + 1
                           )
            </div>
            <img id="@($"{a.song.ID}_{a.Diff}_{a.Time.ToString("yyyy_MM_dd_HH_mm_ss")}")" />
        </div>
        <div>
            <div class="scores_img_grade">
                @switch (a.Rating)
                {
                    case Models.Rating.EXP:
                        <img src="images/grade/explus.png"/>
                        break;
                    case Models.Rating.EX:
                        <img src="images/grade/ex.png"/>
                        break;
                    case Models.Rating.AA:
                        <img src="images/grade/aa.png"/>
                        break;
                    case Models.Rating.A:
                        <img src="images/grade/a.png"/>
                        break;
                    case Models.Rating.B:
                        <img src="images/grade/b.png" />
                        break;
                    case Models.Rating.C:
                        <img src="images/grade/c.png" />
                        break;
                    default:
                        <img src="images/grade/d.png" />
                        break;
                }
            </div>
            <div class="scores_img_clear">
                @switch (a.ClearType)
                {
                    case Models.ClearType.PureMemory:
                        <img src="images/clear/pure.png"/>
                        break;
                    case Models.ClearType.FullRecall:
                        <img src="images/clear/full.png"/>
                        break;
                    case Models.ClearType.NormalClear:
                        <img src="images/clear/normal.png" />
                        break;
                    case Models.ClearType.HardClear:
                        <img src="images/clear/hard.png" />
                        break;
                    case Models.ClearType.EasyClear:
                        <img src="images/clear/easy.png"/>
                        break;
                    default:
                        <img src="images/clear/fail.png" />
                        break;
                }
            </div>
            @switch (a.Diff)
            {
                case Models.SongDiff.Pst:
                    <div class="scores_diff diff_0"><span>PST @(((float)a.ptts.pst).ToString("#0.0"))</span></div>
                    break;
                case Models.SongDiff.Prs:
                        <div class="scores_diff diff_1"><span>PRS @(((float)a.ptts.prs).ToString("#0.0"))</span></div>
                    break;
                case Models.SongDiff.Ftr:
                        <div class="scores_diff diff_2"><span>FTR @(((float)a.ptts.ftr).ToString("#0.0"))</span></div>
                    break;
                case Models.SongDiff.Byd:
                        <div class="scores_diff diff_3"><span>BYD @(((float)a.ptts.byd).ToString("#0.0"))</span></div>
                    break;
            }
            <p class="scores_lbl_title mb-0">@a.song.SepicalDisplay(@a.Diff)</p>
            <p class="scores_lbl_arter mb-0">(@a.song.SepicalArtist(@a.Diff))</p>
            <p class="scores_lbl_combo mb-0">@(a.Time.ToString("yyyy年MM月dd日 HH时mm分"))</p>
            <p class="scores_lbl_score mb-0">@a.Score (@a.ResultPtt)</p>
            <p class="scores_lbl_combo mb-0">Pure:@(a.Pure) (@a.MaxPure)</p>
            <p class="scores_lbl_combo mb-0"> Far:@a.Far Lost:@a.Lost</p>
        </div>
    </div>
        @setImage($"{a.song.ID}_{a.Diff}_{a.Time.ToString("yyyy_MM_dd_HH_mm_ss")}",a.song.SepicalTitleImagePath(a.Diff))
}
    <div class="mb-3">&nbsp;</div>
</div>
<p class="mt-3 mb-3" align="center"><button class="btn btn-success" @onclick="SavePhoto">保存为图片</button></p>
<p align="center"><small>若需要修改成绩，请前往曲目定数</small></p>
<hr />
<p align="center"><button class="btn btn-success" @onclick="ConvertLocalDB">读取本地B30成绩(Root)</button></p>

@code {
    private Models.ScoreModel[] best40 = null;
    public Models.ScoreModel[] Best40
    {
        get
        {
            if (best40 == null)
                best40 = ScoreData.Best.ReadBest40();
            return best40;
        }
        set
        {
            best40 = value;
        }
    }

    public float Best30Value
    {
        get
        {
            Models.ScoreModel[] best30 = Best40.Length > 30 ? Best40.Take(30).ToArray() : Best40.Take(Best40.Length).ToArray();
            float totalPttValue = 0.0f;
            foreach(Models.ScoreModel rec in best30)
            {
                totalPttValue += rec.ResultPtt;
            }
            return  (totalPttValue / 30);
        }
    }
    public string PttRank
    {
        get
        {
            if (Best30Value >= 13.00) return "7";
            else if (Best30Value >= 12.50) return "6";
            else if (Best30Value >= 12.00) return "5";
            else if (Best30Value >= 11.00) return "4";
            else if (Best30Value >= 10.00) return "3";
            else if (Best30Value >= 7.00) return "2";
            else if (Best30Value >= 3.50) return "1";
            else if (Best30Value >= 0.00) return "0";
            else return "off";
        }
    }
    public float Best30CurrentValue
    {
        get
        {
            Models.ScoreModel[] best30 = Best40.Length > 30 ? Best40.Take(30).ToArray() : Best40.Take(Best40.Length).ToArray();
            float totalPttValue = 0.0f;
            foreach (Models.ScoreModel rec in best30)
            {
                totalPttValue += rec.ResultPtt;
            }
            return (totalPttValue / 40.0f);
        }
    }
    public string t(string red)
    {
        Console.WriteLine("BuildOK:" + red);
        return "";
    } 

    public void ConvertLocalDB()
    {
        if (ShellInterface.CheckIfRooted())
        {
            try
            {
                ScoreData.Best.ReadAndConvertLocalSt3Database("/data/data/moe.low.arc/files/st3");
                Best40 = null;
                StateHasChanged();
                Toast.Make("B30已刷新").Show();
            }
            catch (Exception ex)
            {
                CommunityToolkit.Maui.Alerts.Snackbar.Make("运行时发生错误:" + ex.Message).Show();
            }
        }
        else
        {
            CommunityToolkit.Maui.Alerts.Toast.Make("抱歉！但似乎您没有授权Root权限。").Show();
        }
    }
    public string setImage(string selector,string filePath)
    {
        SetImage(selector,filePath);
        return "";
    }
    public async Task SetImage(string selector, string filePath)
    {
        MemoryStream fileStream = new MemoryStream(File.ReadAllBytes(filePath));
        DotNetStreamReference imgStream = new DotNetStreamReference(fileStream);
        await JSRuntime.InvokeVoidAsync("setImage", selector, imgStream);
    }
    public void SavePhoto()
    {
        Toast.Make("正在生成,请勿离开.").Show();
        ValueTask<string> t = JSRuntime.InvokeAsync<string>("getRenderImageBase64", "listofall");
        t.GetAwaiter().OnCompleted(()=>
        {
            byte[] picData = Convert.FromBase64String(t.Result);

            Permissions.StorageWrite w = new Permissions.StorageWrite();
            if (w.CheckStatusAsync().Result != PermissionStatus.Granted)
            {
                Task<PermissionStatus> t = w.RequestAsync();
                t.GetAwaiter().OnCompleted(() =>
            {
                if (t.Result == PermissionStatus.Granted)
                {
                    savePhoto(picData);
                }
                else Toast.Make("需要存储权限").Show();
            });
            }
            else
            {
                savePhoto(picData);
            }
        });


    }
    public void savePhoto(byte[] data)
    {
        string BasePath = "/storage/emulated/0/Pictures";
        string filePath = BasePath+"/arcs_best_"+DateTime.Now.ToString("yyyyMMdd_HHmmss")+".jpg";
        try
        {
            if (!Directory.Exists(BasePath))
            {
                Directory.CreateDirectory(BasePath);
            }
            FileProcessor.SaveFile(filePath, data);
            InvokeAsync(() =>
            {
                MainPage.mpEntry.DisplayAlert("保存完毕", "位于:" + filePath, "OK");
            });
        }
        catch
        {
            InvokeAsync(() =>
            {
                MainPage.mpEntry.DisplayAlert("写入失败", "请检查是否授权存储写入权限", "OK");
            });
        }
    }
}
